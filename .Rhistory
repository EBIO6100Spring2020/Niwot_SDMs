name1 = names[s1]
name2 = names[s2]
diff = count_diff(sp[s1], sp[s2])
diff_mat[s1,s2] = c(name1, name2, diff)
i = i+ 1
}
}
i = 1
n_sp = length(names)
sp = c(deer, human, fox, pika, chimp, beaver)
n_sp = length(sp)
diff_mat = (matrix(ncol=n_sp, nrow=n_sp))
names = c("deer", "human", "fox", "pika", "chimp", "beaver")
colnames(diff_mat) = names
rownames(diff_mat) = names
i = 1
n_sp = length(names)
for (s1 in 1:n_sp){
for (s2 in 1:n_sp){
name1 = names[s1]
name2 = names[s2]
diff = count_diff(sp[s1], sp[s2])
diff_mat[s1,s2] =  diff
i = i+ 1
}
}
plot(diff_mat)
plot(diff_mat, fmt.cell='%d')
plot(diff_mat, fmt.cell='%d', cex=0.5)
plot(diff_mat, fmt.cell='%d', cex=1)
plot(diff_mat, fmt.cell='%d', cex.lab =0.5)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.5)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, gray=T)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, gray=TRUE)
plot(diff_mat, gray=T, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, col = gray, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, col = magma, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, col = plot.matrix::magma, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, grey = T, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, gray=T)
library(plot.matrix)
library(plot.matrix)
gray
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, gray=TRUE)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color)
library(Rcolorbrewer)
install.packages('Rcolorbrewer')
library(RColorBrewer)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=Rc)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=RColorBrewer::)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=RColorBrewer::grey)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=grey)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=grey.colors())
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, color=grey.colors(10))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, fmt=grey.colors(10))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, style=grey.colors(10))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, style=topo.colors)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=topo.colors)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=topo.colors())
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=topo.colors(5))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=topo.colors(10))
?RColorBrewer
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=Dark2)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5, grey))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(grey))
brewer.pal.info
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal("BrBG"))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5,"BrBG"))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5,"grey"))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5,"Greys"))
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5,"Spectral"))
Greys
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5,"Greys"))
deer = "0001001"
human = "1010110"
fox = "1010101"
pika = "1111001"
chimp = "1010110"
beaver = "1101001"
sp = c(deer, human, fox, pika, chimp, beaver)
n_sp = length(sp)
diff_mat = (matrix(ncol=n_sp, nrow=n_sp))
names = c("deer", "human", "fox", "pika", "chimp", "beaver")
colnames(diff_mat) = names
rownames(diff_mat) = names
i = 1
n_sp = length(names)
for (s1 in 1:n_sp){
for (s2 in 1:n_sp){
name1 = names[s1]
name2 = names[s2]
diff = count_diff(sp[s1], sp[s2])
diff_mat[s1,s2] =  diff
i = i+ 1
}
}
library(reshape2)
library(RColorBrewer)
library(plot.matrix)
plot(diff_mat, fmt.cell='%d', cex.axis = 0.8, col=brewer.pal(5,"Greys"))
library(deSolve)
dw_dt = function(t, state, pars){
# compute relative fitness from trait val -
w_mean = pars['w_mean']
ef = pars['ef']
dw = 1.0 / w_mean  * (ef - state) * state
return(list(dw))
# propotional to ef - w_bar
}
st = c(phi0, w0, ef0)
w0 = 0.5
times = seq(0, 30, 0.1)
pars = c(ef = 0.0, w_mean = 0.5)
out = ode(w0, times, dw_dt, pars)
plot(out)
times = seq(0, 30, (30-0)/n_timepts)
n_timepts = 1000
st = c(phi0, w0, ef0)
times = seq(0, 30, (30-0)/n_timepts)
?seq
get_ef_vec = function(init, end, n_timepts){
retunr(seq(init, end, length.out=n_timepts))
}
ef_end = 0.1
n_timepts = 1000
st = c(phi0, w0, ef0)
times = seq(0, 30, (30-0)/n_timepts)
ef_vec = get_ef_vec(ef0, ef_end, n_timepts)
get_ef_vec = function(init, end, n_timepts){
return(seq(init, end, length.out=n_timepts))
}
dphi_dt = function(t, state, pars){
w_mean = state['w_mean']
phi_mean = state['phi_mean']
ef_val = state['ef_val']
dw = 1.0 / w_mean  * (ef - state) * state
return(list(dw))
# propotional to ef - w_bar
}
phi0 = 0.8
w0 = 0.8
ef0 = 0.5
ef_end = 0.1
n_timepts = 1000
st = c(phi0, w0, ef0)
times = seq(0, 30, (30-0)/n_timepts)
ef_vec = get_ef_vec(ef0, ef_end, n_timepts)
ef_Vec
ef_vec
get_ef_vec = function(init, end, n_timepts){
return(seq(init, end, length.out=n_timepts))
}
de_dt = function(ef_state, ef_delta){
ef_new = ef_state + ef_delta
}
dphi_dt = function(t, state, pars){
w_mean = state['w_mean']
phi_mean = state['phi_mean']
ef_val = state['ef_val']
ef_delta = pars['ef_delta']
ef_now = de_dt(ef_val, ef_delta)
dw = 1.0 / w_mean  * (ef - state) * state
return(list(dw))
# propotional to ef - w_bar
}
phi0 = 0.8
w0 = 0.8
ef0 = 0.5
ef_end = 0.1
n_timepts = 1000
ef_delta = ef0 - ef_end / n_timepts
times = seq(0, 30, (30-0)/n_timepts)
st = c(phi0, w0, ef0)
ef_vec = get_ef_vec(ef0, ef_end, n_timepts)
pars = c(ef_delta = ef_delta)
out = ode(w0, times, dw_dt, pars)
library(deSolve)
compute_fitness(ef,phi,sigma)
#
compute_fitness = function(ef, phi, sigma){
r = exp(-1*abs(ef-phi)/(sigma^2))
return(r)
}
compute_fitness(0.4, 0.6, 2.0)
rnorm(5)
rnorm(5, mean=0.6, sigma=0.1)
?rnorm
rnorm(5, mean=0.6, sd=0.1)
compute_fitness(rep(0.4, 10), rnorm(10, mean=0.6, sd=0.1), 2.0)
compute_fitness(rep(0.4, 10), rnorm(10, mean=0.6, sd=0.1), 2.0)
phi = rnorm(10, mean=0.6, sd=0.1)
w = compute_fitness(rep(0.4, 10), phi, 2.0)
cov(w, phi)
cov(w, phi)
phi = rnorm(10, mean=0.6, sd=0.1)
w = compute_fitness(rep(0.4, 10), phi, 0.5)
cov(w, phi)
phi = rnorm(10, mean=0.6, sd=0.1)
w = compute_fitness(rep(0.4, 10), phi, 0.5)
cov(w, phi)
phi = rnorm(10, mean=0.6, sd=0.1)
w = compute_fitness(rep(0.4, 10), phi, 0.1)
cov(w, phi)
compute_fitness(0.4, 0.6, 2.0)
plot(w, phi)
phi = rnorm(100, mean=0.6, sd=0.1)
w = compute_fitness(rep(0.4, 100), phi, 0.1)
plot(w, phi)
plot(phi, w)
phi = rnorm(1000, mean=0.6, sd=0.1)
w = compute_fitness(rep(0.4, 1000), phi, 0.1)
plot(phi, w)
phi = rnorm(1000, mean=0.6, sd=0.2)
w = compute_fitness(rep(0.4, 1000), phi, 0.1)
plot(phi, w)
cov(w, phi)
compute_fitness(0.4, 0.6, 2.0)
phi = rnorm(1000, mean=0.6, sd=0.2)
w = compute_fitness(rep(0.4, 1000), phi, 0.2)
plot(phi, w)
cov(w, phi)
install.packages('rgdal')
install.packages('rgdal')
install.packages('rgeos')
setwd("~/Niwot_SDMs")
system("ls")
system("ls", "-l")
system(c("ls", "-l"))
ls
source('build.R')
## 1. 2020/02/20 -- WR
# this query is the one that pulls an image
plant_comp <- batch_pull(c("Soils data digitized from"), filter = FALSE ,save = FALSE)
summarize_data(plant_comp, plot = TRUE)
## 2. 2020/02/20 -- WR
soil_texture <- batch_pull(c("Soil", "Texture"), filter = TRUE ,save = FALSE)
summarize_data(soil_texture, plot = TRUE)
View(batch_pull)
## 2. 2020/02/20 -- WR
soil_texture <- batch_pull(c("Soil", "Texture"), filter = TRUE ,save = FALSE)
soil_texture
## 2. 2020/02/20 -- WR
soil_texture <- batch_pull(c("Soil"), filter = TRUE ,save = FALSE)
summarize_data(soil_texture, plot = TRUE)
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,1)
samp2 <- rnorm(1000,0,1)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
p <- numeric(1000)
for(i in 1:1000){
samp1 <- rnorm(1000,0,5)
samp2 <- rnorm(1000,0,5)
test <- t.test(samp1,samp2,paired = F, var.equal = T)
p[i] <- test$p.value
}
length(which(p<0.05))
n<-2000 #total number of datapoints (per condition) you are willing to collect after initial 10
D<-0 #True effect size (Keep SD below to 1, otherwise, this is just mean dif, not d)
SD<-1 #Set True standard deviation.
p<-numeric(n) #store p-values
x<-numeric(n) #store x-values
y<-numeric(n) #store y-values
n<-n+10 #script calculates p-values after 10 people in each condition, so add 10 to number of datapoints
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
for(i in 10:n){ #for each simulated participants after the first 10
x[i]<-rnorm(n = 1, mean = 0, sd = SD)
y[i]<-rnorm(n = 1, mean = D, sd = SD)
z<-t.test(x[1:i],y[1:i], var.equal=TRUE) #perform the t-test
p[i]<-z$p.value
}
plot(p)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
test.30 <- rnorm(30,0,1)
hist(test.30)
